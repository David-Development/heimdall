version: '2.1'

services:

  camera_rtsp:
    build:
      context: .
      dockerfile: Dockerfile.backend
    volumes:
      - "./heimdall-backend/startDockerCamera.sh:/app/startDocker.sh"
      - "./heimdall-backend/camerahandler_rtsp.py:/app/camerahandler_rtsp.py"

  heimdall-backend: 
    build:
      context: .
      dockerfile: Dockerfile.backend
    #restart: always
    #mem_limit: 4096m #2048m
    image: luhmer/heimdall-backend
    volumes:
      - "./heimdall-backend:/app/"
    depends_on:
      - mqtt-broker
      - postgres
      - redis
    ports: 
      - "5000:5000/tcp"

  postgres: 
    image: postgres
    ports:
      - "5432:5432" # required for pgstudio
    environment: 
      # This optional environment variable can be used to define a different name for the default database that is created when the image is first started. If it is not specified, then the value of POSTGRES_USER will be used.
      - POSTGRES_DB=heimdall
      # If it is not specified, then the default user of 'postgres' will be used.
      - POSTGRES_USER=heimdall 
      # This environment variable sets the superuser password for PostgreSQL. The default superuser is defined by the POSTGRES_USER environment variable
      - POSTGRES_PASSWORD=heimdall

  redis:
    image: redis
    ports:
      - "6379:6379"

  heimdall-frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    image: luhmer/heimdall-frontend
    volumes:
      - "./heimdall-frontend/:/app/"
    ports:
      - "5001:3000/tcp"

  heimdall-camera-proxy:
    build:
      context: .
      dockerfile: Dockerfile.camera-proxy
    image: luhmer/heimdall-camera-proxy
    environment:
      #- HEIMDALL_BACKEND=http://heimdall-backend:5000 # Inside same docker-compose
      #- HEIMDALL_BACKEND=http://10.20.114.105:5000 # otherwise set IP
      - MQTT_BROKER_IP=192.168.10.53
    ports:
      - "9000:9000/tcp"

  ffmpeg_h264_stream:
    build:
      context: .
      dockerfile: Dockerfile.ffmpeg-h264-stream
    image: heimdall/ffmpeg-h264-stream
    volumes:
      - "./ffmpeg-h264-stream/:/app/"
    ports:
      - "5002:8080/tcp"


  mock_rest_api:
    build:
      context: mock_rest_api
    image: luhmer/json-server
    volumes:
      - "./mock_rest_api/mock_data.json:/data/db.json"
      - "./mock_rest_api/images/:/usr/local/lib/node_modules/json-server/lib/server/public/images/"
#      - "./mock_rest_api/images/:/data/static/images/"
    ports:
      - "5003:80"

  mock-camera:
    build:
      context: .
      dockerfile: Dockerfile.backend
    volumes:
      - "./mock_camera/startDocker.sh:/app/startDocker.sh" 
      - "./mock_camera/mqttCamera.py:/app/mqttCamera.py" 
      - "./mock_camera/images:/app/images" 

  #espeakbox:
  #  image: parente/espeakbox
  #  ports:
  #    - "8080:8080"
    
  # localhost:8080/voices
  # localhost:8080/speech?text=David Luhmer&voice=de&speed=100&encoding=mp3


  # http://emqttd-docs.readthedocs.io/en/latest/getstarted.html#web-dashboard
  # Check ports: http://localhost:18083/#/listeners
  #mqtt-broker:
  #  build: emq_docker
  #  image: emq
  #  ports:
  #    - "1883:1883/tcp"   # mqtt
  #    - "8083:8083/tcp"   # websockets
  #    - "18083:18083/tcp" # emq webinterface

  mqtt-broker:
    #build: 
    #  context: ./docker-mosquitto
    #  dockerfile: Dockerfile
    #image: jllopis/mosquitto:v1.4.14
    image: eclipse-mosquitto:1.4.12
    volumes:
      #- ./mosquitto/mosquitto.conf:/etc/mosquitto/mosquitto.conf:ro # jllopis/mosquitto container
      - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro # eclipse-mosquitto container
    ports:
      - "1883:1883/tcp"   # mqtt
      - "8083:8083/tcp"   # websockets
      - "9001:9001/tcp"   # mosquitto



  # Login:
  #   host: postgres
  #   user: heimdall
  #   pass: heimdall
  #   database: heimdall
  pgstudio:
    image: lukasmartinelli/pgstudio
    ports:
      - "8080:8080"