version: '3.4'

services:

  heimdall-backend: 
    container_name: heimdall-backend
    build:
      context: ./heimdall-backend
      dockerfile: Dockerfile
    environment:
      - TZ=${TIMEZONE}
      - ENABLE_LIVEVIEW=False
    image: luhmer/heimdall-backend:v1.0
    volumes:
      - "./data/images:/app/heimdall/images/"
      - "./data/ml_models:/app/heimdall/ml_models/"
#    volumes:
#      - "./heimdall-backend:/app/" # Overlay (for faster development)
    depends_on:
      - mqtt-broker
      - postgres
      - redis
    #ports: 
    #  - "5000:5000/tcp"

  heimdall-frontend:
    container_name: heimdall-frontend
    image: luhmer/heimdall-frontend:v1.0
    build:
      context: ./heimdall-frontend
      dockerfile: Dockerfile
#      args:
#        NODE_ENV: dev # This line is required for dev mode
#    command: /bin/sh -c "cd /app/dev/ && yarn install --modules-folder .. && yarn start" # This line is required for dev mode
#    volumes: # This line is required for dev mode
#      - "./heimdall-frontend/:/app/dev/" # This line is required for dev mode
    environment:
      - TZ=${TIMEZONE}
#    ports:
#      - "3000:3000/tcp"
    
  postgres: 
    container_name: postgres
    image: postgres
    #ports:
    #  - "5432:5432" # required for pgstudio
    environment:
      - TZ=${TIMEZONE}
      # This optional environment variable can be used to define a different name for the default database that is created when the image is first started. If it is not specified, then the value of POSTGRES_USER will be used.
      - POSTGRES_DB=heimdall
      # If it is not specified, then the default user of 'postgres' will be used.
      - POSTGRES_USER=heimdall 
      # This environment variable sets the superuser password for PostgreSQL. The default superuser is defined by the POSTGRES_USER environment variable
      - POSTGRES_PASSWORD=heimdall
  
  redis:
    image: redis
    ports:
      - "6379:6379"

  # RTSP Camera Proxy
  heimdall-camera-rtsp:
    container_name: heimdall-camera-rtsp
    image: luhmer/opencv-python3:v3.4.1
    volumes:
      - "./heimdall-camera-rtsp/camerahandler_rtsp.py:/usr/src/app/camerahandler_rtsp.py"
    environment:
      - RTSP_HOST=10.20.146.26
      #- RTSP_HOST=192.168.10.48
    command: python3 -u /usr/src/app/camerahandler_rtsp.py


  # Socket Camera Proxy
  heimdall-camera-proxy:
    container_name: heimdall-camera-proxy
    image: luhmer/opencv-python3:v3.4.1
    volumes:
      - "./heimdall-camera-proxy/:/usr/src/app/"
    command: python3 -u /usr/src/app/camerahandler.py
    #environment:
    #  - HEIMDALL_BACKEND=http://heimdall-backend:5000 # Inside same docker-compose
    #  - HEIMDALL_BACKEND=http://10.20.114.105:5000 # otherwise set IP
    #  - MQTT_BROKER_IP=mqtt-broker # Inside same docker-compose
    #  - MQTT_BROKER_IP=192.168.10.53
    environment:
      - TZ=${TIMEZONE}
    #depends_on:
    #  - mqtt-broker
    networks: 
      - bridge-iot
      - default
    ports:
      - "0.0.0.0:9000:9000/tcp"
      
  # h264 support
  ffmpeg_h264_stream:
    container_name: ffmpeg-h264-stream
    build:
      context: .
      dockerfile: Dockerfile.ffmpeg-h264-stream
    environment:
      - TZ=${TIMEZONE}
    volumes:
      - "./ffmpeg-h264-stream/:/app/"
    ports:
      - "5002:8080/tcp"


  mock_rest_api:
    container_name: mock-rest-api
    build:
      context: mock_rest_api
    environment:
      - TZ=${TIMEZONE}
    volumes:
      - "./mock_rest_api/mock_data.json:/data/db.json"
      - "./mock_rest_api/images/:/usr/local/lib/node_modules/json-server/lib/server/public/images/"
#      - "./mock_rest_api/images/:/data/static/images/"
    ports:
      - "5003:80"

  mock-camera:
    container_name: mock-camera
    image: luhmer/heimdall-backend:v1.0
    environment:
      - TZ=${TIMEZONE}
    volumes:
      - "./mock_camera/startDocker.sh:/app/startDocker.sh" 
      - "./mock_camera/mqttCamera.py:/app/mqttCamera.py" 
      - "./mock_camera/images:/app/images" 

  # espeakbox allows you to generate a mp3 file from a given text
  # localhost:8080/voices
  # localhost:8080/speech?text=David Luhmer&voice=de&speed=100&encoding=mp3
  espeakbox:
    image: parente/espeakbox
    ports:
      - "8080:8080"


  # http://emqttd-docs.readthedocs.io/en/latest/getstarted.html#web-dashboard
  # Check ports: http://localhost:18083/#/listeners
  mqtt-broker:
    container_name: mqtt-broker
    build: emq_docker
    image: luhmer/emqtt:v2.3.5
    environment:
      - TZ=${TIMEZONE}
      - EMQ_MQTT__MAX_PACKET_SIZE=256MB ## Max Packet Size Allowed, 64K by default. Max size is 256MB.
    networks: 
      - bridge-iot
      - default
    ports:
      - "0.0.0.0:1883:1883/tcp"   # mqtt
      - "0.0.0.0:18083:18083/tcp" # emq webinterface  

#  mqtt-broker:
#    container_name: mqtt-broker
#    image: eclipse-mosquitto:1.4.12
#    environment:
#      - TZ=${TIMEZONE}
#    volumes:
#      - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro # eclipse-mosquitto container
#    networks: 
#      - bridge-iot
#      - default
#    ports:
#      - "1883:1883/tcp"   # mqtt
#      - "9001:9001/tcp"   # mosquitto


  # pgstudio = PostgreSQL Studio (Web-Based Postgres SQL GUI)
  # Login:
  #   host: postgres
  #   user: heimdall
  #   pass: heimdall
  #   database: heimdall
  pgstudio:
    container_name: pgstudio
    image: lukasmartinelli/pgstudio
    ports:
      - "8080:8080"


  heimdall-proxy:
    container_name: proxy
    image: nginx
    environment:
      - TZ=${TIMEZONE}
    volumes:
      - ./nginx-proxy/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - heimdall-backend
      - heimdall-frontend
      - mqtt-broker
    networks: 
      - bridge-iot
      - default
    ports:
      - "0.0.0.0:80:80"
      - "0.0.0.0:8083:8083"


networks:
  bridge-iot:
    external: true  
